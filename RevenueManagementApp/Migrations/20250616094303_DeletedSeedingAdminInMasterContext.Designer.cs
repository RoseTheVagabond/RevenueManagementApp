// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RevenueManagementApp.Models;

#nullable disable

namespace RevenueManagementApp.Migrations
{
    [DbContext(typeof(MasterContext))]
    [Migration("20250616094303_DeletedSeedingAdminInMasterContext")]
    partial class DeletedSeedingAdminInMasterContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Cathegory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("Cathegory_pk");

                    b.ToTable("Cathegory", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Business Software"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Gaming"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Design"
                        });
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Company", b =>
                {
                    b.Property<string>("Krs")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("KRS");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("Krs")
                        .HasName("Company_pk");

                    b.HasIndex("Krs")
                        .IsUnique();

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("CompanyKrs")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("Company_KRS");

                    b.Property<int?>("DiscountId")
                        .HasColumnType("int")
                        .HasColumnName("Discount_id");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime")
                        .HasColumnName("end");

                    b.Property<string>("IndividualPesel")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("Individual_PESEL");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit")
                        .HasColumnName("isPaid");

                    b.Property<bool>("IsSigned")
                        .HasColumnType("bit")
                        .HasColumnName("isSigned");

                    b.Property<decimal>("Paid")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("paid");

                    b.Property<DateTime>("SoftwareDeadline")
                        .HasColumnType("datetime")
                        .HasColumnName("softwareDeadline");

                    b.Property<int>("SoftwareId")
                        .HasColumnType("int")
                        .HasColumnName("Software_id");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime")
                        .HasColumnName("start");

                    b.Property<decimal>("ToPay")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("toPay");

                    b.HasKey("Id")
                        .HasName("Contract_pk");

                    b.HasIndex("CompanyKrs");

                    b.HasIndex("DiscountId");

                    b.HasIndex("IndividualPesel");

                    b.HasIndex("SoftwareId");

                    b.ToTable("Contract", null, t =>
                        {
                            t.HasCheckConstraint("CK_Contract_ClientType", "([Individual_PESEL] IS NOT NULL AND [Company_KRS] IS NULL) OR ([Individual_PESEL] IS NULL AND [Company_KRS] IS NOT NULL)");
                        });
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Discount", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime")
                        .HasColumnName("end");

                    b.Property<int>("Percentage")
                        .HasColumnType("int")
                        .HasColumnName("percentage");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime")
                        .HasColumnName("start");

                    b.HasKey("Id")
                        .HasName("Discount_pk");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Individual", b =>
                {
                    b.Property<string>("Pesel")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("PESEL");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("address");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deletedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("lastName");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("phoneNumber");

                    b.HasKey("Pesel")
                        .HasName("Individual_pk");

                    b.HasIndex("Pesel")
                        .IsUnique();

                    b.ToTable("Individual", (string)null);
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Software", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("CathegoryId")
                        .HasColumnType("int")
                        .HasColumnName("Cathegory_id");

                    b.Property<string>("CurrentVersion")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("currentVersion");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("Software_pk");

                    b.HasIndex("CathegoryId");

                    b.ToTable("Software", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CathegoryId = 1,
                            CurrentVersion = "2024",
                            Description = "Complete office productivity suite",
                            Name = "Office Suite Pro",
                            Price = 4999.99m
                        },
                        new
                        {
                            Id = 2,
                            CathegoryId = 2,
                            CurrentVersion = "5.1.2",
                            Description = "Advanced 3D game development engine",
                            Name = "Game Engine X",
                            Price = 7999.99m
                        },
                        new
                        {
                            Id = 3,
                            CathegoryId = 3,
                            CurrentVersion = "12.3",
                            Description = "Professional graphic design software",
                            Name = "Design Studio",
                            Price = 2999.99m
                        },
                        new
                        {
                            Id = 4,
                            CathegoryId = 1,
                            CurrentVersion = "4.8.1",
                            Description = "Integrated development environment",
                            Name = "Code Builder",
                            Price = 3499.99m
                        },
                        new
                        {
                            Id = 6,
                            CathegoryId = 3,
                            CurrentVersion = "3.5.1",
                            Description = "Design templates library",
                            Name = "DesignMaster",
                            Price = 1999.99m
                        },
                        new
                        {
                            Id = 7,
                            CathegoryId = 1,
                            CurrentVersion = "2.1.4",
                            Description = "Online management system",
                            Name = "BusinessPlatform",
                            Price = 5999.99m
                        },
                        new
                        {
                            Id = 8,
                            CathegoryId = 2,
                            CurrentVersion = "6.0.2",
                            Description = "Advanced multimedia player",
                            Name = "MediaPlayer Pro",
                            Price = 1499.99m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Contract", b =>
                {
                    b.HasOne("RevenueManagementApp.Models.Company", "Company")
                        .WithMany("Contracts")
                        .HasForeignKey("CompanyKrs")
                        .HasConstraintName("Contract_Company");

                    b.HasOne("RevenueManagementApp.Models.Discount", "Discount")
                        .WithMany("Contracts")
                        .HasForeignKey("DiscountId")
                        .HasConstraintName("Contract_Discount");

                    b.HasOne("RevenueManagementApp.Models.Individual", "Individual")
                        .WithMany("Contracts")
                        .HasForeignKey("IndividualPesel")
                        .HasConstraintName("Contract_Individual");

                    b.HasOne("RevenueManagementApp.Models.Software", "Software")
                        .WithMany("Contracts")
                        .HasForeignKey("SoftwareId")
                        .IsRequired()
                        .HasConstraintName("Contract_Software");

                    b.Navigation("Company");

                    b.Navigation("Discount");

                    b.Navigation("Individual");

                    b.Navigation("Software");
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Software", b =>
                {
                    b.HasOne("RevenueManagementApp.Models.Cathegory", "Cathegory")
                        .WithMany("Softwares")
                        .HasForeignKey("CathegoryId")
                        .IsRequired()
                        .HasConstraintName("Software_Cathegory");

                    b.Navigation("Cathegory");
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Cathegory", b =>
                {
                    b.Navigation("Softwares");
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Company", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Discount", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Individual", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("RevenueManagementApp.Models.Software", b =>
                {
                    b.Navigation("Contracts");
                });
#pragma warning restore 612, 618
        }
    }
}
